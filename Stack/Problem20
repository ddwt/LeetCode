typedef struct Stack {
    char *data;
    int top, size;
} Stack;

Stack *init(int);
void clear(Stack *);
int push(Stack *, char);
int pop(Stack *);
char top(Stack *);
int empty(Stack *);

bool isValid(char* s) {
    int len = strlen(s);
    Stack *stack = init(len);
    for (int i = 0; i < len; i++) {
        switch (top(stack)) {
            case '(':
                switch (s[i]) {
                    case '(':
                        push(stack, s[i]);
                        break;
                    case '[':
                        push(stack, s[i]);
                        break;
                    case '{':
                        push(stack, s[i]);
                        break;
                    case ')':
                        pop(stack);
                        break;
                    case ']':
                        return false;
                        break;
                    case '}':
                        return false;
                        break;
                }
                break;
            case '[':
                switch (s[i]) {
                    case '(':
                        push(stack, s[i]);
                        break;
                    case '[':
                        push(stack, s[i]);
                        break;
                    case '{':
                        push(stack, s[i]);
                        break;
                    case ')':
                        return false;
                        break;
                    case ']':
                        pop(stack);
                        break;
                    case '}':
                        return false;
                        break;
                }
                break;
            case '{':
                switch (s[i]) {
                    case '(':
                        push(stack, s[i]);
                        break;
                    case '[':
                        push(stack, s[i]);
                        break;
                    case '{':
                        push(stack, s[i]);
                        break;
                    case ')':
                        return false;
                        break;
                    case ']':
                        return false;
                        break;
                    case '}':
                        pop(stack);
                        break;
                }
                break;
            default:
                switch (s[i]) {
                    case '(':
                        push(stack, s[i]);
                        break;
                    case '[':
                        push(stack, s[i]);
                        break;
                    case '{':
                        push(stack, s[i]);
                        break;
                    case ')':
                        return false;
                        break;
                    case ']':
                        return false;
                        break;
                    case '}':
                        return false;
                        break;
                }
                break;
        } 
    }
    if (top(stack) == NULL){
        return true;
    } else 
        return false;
}

Stack *init(int n) {
    Stack *s = (Stack *)malloc(sizeof(Stack));
    s->data = (char *)malloc(sizeof(char) * n);
    s->top = -1;
    s->size = n;
    return s;
}

void clear(Stack *s) {
    if (s == NULL) return ;
    free(s->data);
    free(s);
    return ;
}

int push(Stack *s, char value) {
    if (s->top + 1 == s->size) return 0;
    s->top += 1;
    s->data[s->top] = value;
    return 1;
}

int pop(Stack *s) {
    if (empty(s)) return 0;
    s->top -= 1;
    return 1;
}

char top(Stack *s) {
    if (empty(s)) return NULL;
    return s->data[s->top];
}

int empty(Stack *s) {
    return s->top == -1;
}
