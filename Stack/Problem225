typedef struct {
    int *data;
    int head, tail;
    int length, count;
} Queue;

typedef struct {
    Queue *in;
    Queue *out;
} MyStack;

Queue *init(int);
void clear(Queue *);
int push(Queue *, int);
int pop(Queue *);
int front(Queue *);
int empty(Queue *);

MyStack* myStackCreate(int maxSize);
void myStackPush(MyStack* obj, int x);
int myStackPop(MyStack* obj);
int myStackTop(MyStack* obj);
bool myStackEmpty(MyStack* obj);
void myStackFree(MyStack* obj);

/** Initialize your data structure here. */
MyStack* myStackCreate(int maxSize) {
    MyStack *mys = (MyStack *)malloc(sizeof(MyStack));
    mys->in = init(maxSize);
    mys->out = init(maxSize);
    return mys;
}

/** Push element x onto stack. */
void myStackPush(MyStack* obj, int x) {
    if (obj->in->count == obj->in->length) return ;
    push(obj->in, x);
    
}

/** Removes the element on top of the stack and returns that element. */
int myStackPop(MyStack* obj) {
    int temp;
    if (empty(obj->in)) return 0;
    while (!empty(obj->in)) {
        push(obj->out, front(obj->in));
        pop(obj->in);
    }
    //printf("count = %d\n", obj->out->count);
    int len = obj->out->count;
    for (int i = 0; i < len; i++) {
        if (i < len - 1) {
            push(obj->in, front(obj->out));
            pop(obj->out);
        } else {
            temp = front(obj->out);
            pop(obj->out);
        }
    }
    return temp;
}

/** Get the top element. */
int myStackTop(MyStack* obj) {
    if (empty(obj->in)) return 0;
    return obj->in->data[obj->in->tail];
}

/** Returns whether the stack is empty. */
bool myStackEmpty(MyStack* obj) {
    if (empty(obj->in)) 
        return true;
    else 
        return false;
    
}

void myStackFree(MyStack* obj) {
    if (obj == NULL) return ;
    free(obj->in->data);
    free(obj->in);
    free(obj->out->data);
    free(obj->out);
    free(obj);
    return ;
}

Queue *init(int n) {
    Queue *q = (Queue *)malloc(sizeof(Queue));
    q->data = (int)malloc(sizeof(int));
    q->head = 0;
    q->tail = -1;
    q->count = 0;
    q->length = n;
    return q;
}

void clear(Queue *q) {
    if (q == NULL) return ;
    free(q->data);
    free(q);
    return ;
}

int push(Queue *q, int value) {
    if (q->count == q->length) return 0;
    q->tail = (q->tail + 1) % q->length;
    q->count += 1;
    q->data[q->tail] = value;
    return 1;
}

int pop(Queue *q) {
    if (empty(q)) return 0;
    int temp = q->data[q->head];
    q->head = (q->head + 1) % q->length;
    q->count -= 1;
    //printf("temp = %d\n", temp);
    return temp;
}

int front(Queue *q) {
    if (empty(q)) return 0;
    return q->data[q->head];
}

int empty(Queue *q) {
    return q->count == 0;
}

/**
 * Your MyStack struct will be instantiated and called as such:
 * struct MyStack* obj = myStackCreate(maxSize);
 * myStackPush(obj, x);
 * int param_2 = myStackPop(obj);
 * int param_3 = myStackTop(obj);
 * bool param_4 = myStackEmpty(obj);
 * myStackFree(obj);
 */
