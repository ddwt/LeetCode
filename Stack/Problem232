typedef struct {
    int *data;
    int top, size;
} Stack;

typedef struct{
    Stack *in;
    Stack *out;
} MyQueue;


Stack *init(int);
void clear(Stack *);
int push(Stack *, int);
int pop(Stack *);
int top(Stack *);
int empty(Stack *);

void myQueuePush(MyQueue* obj, int x);
int myQueuePop(MyQueue* obj);
int myQueuePeek(MyQueue* obj);
bool myQueueEmpty(MyQueue* obj);
void myQueueFree(MyQueue* obj);


/** Initialize your data structure here. */
MyQueue* myQueueCreate(int maxSize) {
    MyQueue *myq = (MyQueue *)malloc(sizeof(MyQueue));
    myq->in = init(maxSize);
    myq->out = init(maxSize);
    return myq;
}

/** Push element x to the back of queue. */
void myQueuePush(MyQueue* obj, int x) {
    while (empty(obj->in) != 1) {
        push(obj->out, obj->in->data[obj->in->top]);
        pop(obj->in);
    }
    push(obj->in, x);
    while (empty(obj->out) != 1) {
        push(obj->in, obj->out->data[obj->out->top]);
        pop(obj->out);
    }
    printf("push\n");
}

/** Removes the element from in front of queue and returns that element. */
int myQueuePop(MyQueue* obj) {
    if (empty(obj->in)) return 0;
    
    printf("pop\n");
    return pop(obj->in);
}

/** Get the front element. */
int myQueuePeek(MyQueue* obj) {
    if (empty(obj->in)) return 0;
    printf("peek\n");
    return obj->in->data[obj->in->top];
}

/** Returns whether the queue is empty. */
bool myQueueEmpty(MyQueue* obj) {
    printf("empty\n");
    return empty(obj->in) == 1;
}

void myQueueFree(MyQueue* obj) {
    if (obj == NULL) return ;
    free(obj->in->data);
    free(obj->in);
    free(obj->out->data);
    free(obj->out);
    free(obj);
}

Stack *init(int n) {
    Stack *s = (Stack *)malloc(sizeof(Stack));
    s->data = (int *)malloc(sizeof(int) * n);
    s->top = -1;
    s->size = n;
    return s;
}

void clear(Stack *s) {
    if (s == NULL) return ;
    free(s);
    free(s->data);
    return ;
}

int push(Stack *s, int value) {
    if (s->top + 1 == s->size) return 0;
    s->top += 1;
    s->data[s->top] = value;
    return 1;
}

int pop(Stack *s) {
    if (empty(s)) return 0;
    int temp = s->data[s->top];
    s->top -= 1;
    return temp;
}

int top(Stack *s) {
    if (empty(s)) return 0;
    return s->data[s->top];
}

int empty(Stack *s) {
    if (s->top == -1)
        return 1;
    else 
        return 0;
}


/**
 * Your MyQueue struct will be instantiated and called as such:
 * struct MyQueue* obj = myQueueCreate(maxSize);
 * myQueuePush(obj, x);
 * int param_2 = myQueuePop(obj);
 * int param_3 = myQueuePeek(obj);
 * bool param_4 = myQueueEmpty(obj);
 * myQueueFree(obj);
 */
